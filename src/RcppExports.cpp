// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// do_rgig1
double do_rgig1(double lambda, double chi, double psi);
RcppExport SEXP _tsbcf_do_rgig1(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(do_rgig1(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// gig_norm
double gig_norm(double lambda, double chi, double psi);
RcppExport SEXP _tsbcf_gig_norm(SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(gig_norm(lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// checkFit
List checkFit(arma::vec y, arma::mat mcmcdraws, bool probit, bool doWaic, Rcpp::Nullable<Rcpp::NumericVector> sig, Rcpp::Nullable<Rcpp::IntegerVector> yobs);
RcppExport SEXP _tsbcf_checkFit(SEXP ySEXP, SEXP mcmcdrawsSEXP, SEXP probitSEXP, SEXP doWaicSEXP, SEXP sigSEXP, SEXP yobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mcmcdraws(mcmcdrawsSEXP);
    Rcpp::traits::input_parameter< bool >::type probit(probitSEXP);
    Rcpp::traits::input_parameter< bool >::type doWaic(doWaicSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type yobs(yobsSEXP);
    rcpp_result_gen = Rcpp::wrap(checkFit(y, mcmcdraws, probit, doWaic, sig, yobs));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm0
NumericVector dmixnorm0(NumericVector& x, NumericVector& logprob, NumericVector& mu, double& sd);
RcppExport SEXP _tsbcf_dmixnorm0(SEXP xSEXP, SEXP logprobSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type logprob(logprobSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm0(x, logprob, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm0
NumericVector pmixnorm0(NumericVector& x, NumericVector& logprob, NumericVector& mu, double& sd);
RcppExport SEXP _tsbcf_pmixnorm0(SEXP xSEXP, SEXP logprobSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type logprob(logprobSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm0(x, logprob, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm
NumericVector dmixnorm(NumericVector& x, NumericVector& logprob, NumericVector& mu, NumericVector& sd);
RcppExport SEXP _tsbcf_dmixnorm(SEXP xSEXP, SEXP logprobSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type logprob(logprobSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm(x, logprob, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm
NumericVector pmixnorm(NumericVector& x, NumericVector& logprob, NumericVector& mu, NumericVector& sd);
RcppExport SEXP _tsbcf_pmixnorm(SEXP xSEXP, SEXP logprobSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type logprob(logprobSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm(x, logprob, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm0_post
NumericMatrix dmixnorm0_post(NumericVector x, List mus, NumericVector sd, List logprobs);
RcppExport SEXP _tsbcf_dmixnorm0_post(SEXP xSEXP, SEXP musSEXP, SEXP sdSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm0_post(x, mus, sd, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm0_post
NumericMatrix pmixnorm0_post(NumericVector x, List mus, NumericVector sd, List logprobs);
RcppExport SEXP _tsbcf_pmixnorm0_post(SEXP xSEXP, SEXP musSEXP, SEXP sdSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm0_post(x, mus, sd, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// dmixnorm_post
NumericMatrix dmixnorm_post(NumericVector x, List mus, List sds, List logprobs);
RcppExport SEXP _tsbcf_dmixnorm_post(SEXP xSEXP, SEXP musSEXP, SEXP sdsSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< List >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(dmixnorm_post(x, mus, sds, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// pmixnorm_post
NumericMatrix pmixnorm_post(NumericVector x, List mus, List sds, List logprobs);
RcppExport SEXP _tsbcf_pmixnorm_post(SEXP xSEXP, SEXP musSEXP, SEXP sdsSEXP, SEXP logprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< List >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< List >::type logprobs(logprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmixnorm_post(x, mus, sds, logprobs));
    return rcpp_result_gen;
END_RCPP
}
// rpgmix
NumericVector rpgmix(int n, double a, int m);
RcppExport SEXP _tsbcf_rpgmix(SEXP nSEXP, SEXP aSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rpgmix(n, a, m));
    return rcpp_result_gen;
END_RCPP
}
// tsbcfFit
List tsbcfFit(arma::vec y, arma::vec z, arma::vec zpred, arma::vec tgt, arma::vec tpred, arma::vec x_con, arma::vec x_mod, arma::vec xpred_con, arma::vec xpred_mod, List xinfo_list_con, List xinfo_list_mod, arma::vec trt_init, int nburn, int nsim, int ntree_con, int ntree_mod, double lambda, double sigq, double sighat, double nu, double base_con, double power_con, double base_mod, double power_mod, double ecross_con, double ecross_mod, double con_sd, double mod_sd, bool use_muscale, bool use_tauscale, CharacterVector treef_name_, bool save_trees, bool silent_mode);
RcppExport SEXP _tsbcf_tsbcfFit(SEXP ySEXP, SEXP zSEXP, SEXP zpredSEXP, SEXP tgtSEXP, SEXP tpredSEXP, SEXP x_conSEXP, SEXP x_modSEXP, SEXP xpred_conSEXP, SEXP xpred_modSEXP, SEXP xinfo_list_conSEXP, SEXP xinfo_list_modSEXP, SEXP trt_initSEXP, SEXP nburnSEXP, SEXP nsimSEXP, SEXP ntree_conSEXP, SEXP ntree_modSEXP, SEXP lambdaSEXP, SEXP sigqSEXP, SEXP sighatSEXP, SEXP nuSEXP, SEXP base_conSEXP, SEXP power_conSEXP, SEXP base_modSEXP, SEXP power_modSEXP, SEXP ecross_conSEXP, SEXP ecross_modSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP use_muscaleSEXP, SEXP use_tauscaleSEXP, SEXP treef_name_SEXP, SEXP save_treesSEXP, SEXP silent_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zpred(zpredSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tgt(tgtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tpred(tpredSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_con(x_conSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_mod(x_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xpred_con(xpred_conSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xpred_mod(xpred_modSEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_list_con(xinfo_list_conSEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_list_mod(xinfo_list_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigq(sigqSEXP);
    Rcpp::traits::input_parameter< double >::type sighat(sighatSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type base_con(base_conSEXP);
    Rcpp::traits::input_parameter< double >::type power_con(power_conSEXP);
    Rcpp::traits::input_parameter< double >::type base_mod(base_modSEXP);
    Rcpp::traits::input_parameter< double >::type power_mod(power_modSEXP);
    Rcpp::traits::input_parameter< double >::type ecross_con(ecross_conSEXP);
    Rcpp::traits::input_parameter< double >::type ecross_mod(ecross_modSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< bool >::type use_muscale(use_muscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_tauscale(use_tauscaleSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< bool >::type save_trees(save_treesSEXP);
    Rcpp::traits::input_parameter< bool >::type silent_mode(silent_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(tsbcfFit(y, z, zpred, tgt, tpred, x_con, x_mod, xpred_con, xpred_mod, xinfo_list_con, xinfo_list_mod, trt_init, nburn, nsim, ntree_con, ntree_mod, lambda, sigq, sighat, nu, base_con, power_con, base_mod, power_mod, ecross_con, ecross_mod, con_sd, mod_sd, use_muscale, use_tauscale, treef_name_, save_trees, silent_mode));
    return rcpp_result_gen;
END_RCPP
}
// tsbcfProbit
List tsbcfProbit(arma::vec y, arma::vec yobs, arma::vec z, arma::vec zpred, arma::vec tgt, arma::vec tpred, arma::vec x_con, arma::vec x_mod, arma::vec xpred_con, arma::vec xpred_mod, List xinfo_list_con, List xinfo_list_mod, arma::vec trt_init, int nburn, int nsim, int ntree_con, int ntree_mod, double lambda, double sigq, double nu, double offset, double base_con, double power_con, double base_mod, double power_mod, double ecross_con, double ecross_mod, double con_sd, double mod_sd, bool use_muscale, bool use_tauscale, CharacterVector treef_name_, bool save_trees, bool silent_mode);
RcppExport SEXP _tsbcf_tsbcfProbit(SEXP ySEXP, SEXP yobsSEXP, SEXP zSEXP, SEXP zpredSEXP, SEXP tgtSEXP, SEXP tpredSEXP, SEXP x_conSEXP, SEXP x_modSEXP, SEXP xpred_conSEXP, SEXP xpred_modSEXP, SEXP xinfo_list_conSEXP, SEXP xinfo_list_modSEXP, SEXP trt_initSEXP, SEXP nburnSEXP, SEXP nsimSEXP, SEXP ntree_conSEXP, SEXP ntree_modSEXP, SEXP lambdaSEXP, SEXP sigqSEXP, SEXP nuSEXP, SEXP offsetSEXP, SEXP base_conSEXP, SEXP power_conSEXP, SEXP base_modSEXP, SEXP power_modSEXP, SEXP ecross_conSEXP, SEXP ecross_modSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP use_muscaleSEXP, SEXP use_tauscaleSEXP, SEXP treef_name_SEXP, SEXP save_treesSEXP, SEXP silent_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zpred(zpredSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tgt(tgtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tpred(tpredSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_con(x_conSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x_mod(x_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xpred_con(xpred_conSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xpred_mod(xpred_modSEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_list_con(xinfo_list_conSEXP);
    Rcpp::traits::input_parameter< List >::type xinfo_list_mod(xinfo_list_modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type sigq(sigqSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type base_con(base_conSEXP);
    Rcpp::traits::input_parameter< double >::type power_con(power_conSEXP);
    Rcpp::traits::input_parameter< double >::type base_mod(base_modSEXP);
    Rcpp::traits::input_parameter< double >::type power_mod(power_modSEXP);
    Rcpp::traits::input_parameter< double >::type ecross_con(ecross_conSEXP);
    Rcpp::traits::input_parameter< double >::type ecross_mod(ecross_modSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< bool >::type use_muscale(use_muscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_tauscale(use_tauscaleSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< bool >::type save_trees(save_treesSEXP);
    Rcpp::traits::input_parameter< bool >::type silent_mode(silent_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(tsbcfProbit(y, yobs, z, zpred, tgt, tpred, x_con, x_mod, xpred_con, xpred_mod, xinfo_list_con, xinfo_list_mod, trt_init, nburn, nsim, ntree_con, ntree_mod, lambda, sigq, nu, offset, base_con, power_con, base_mod, power_mod, ecross_con, ecross_mod, con_sd, mod_sd, use_muscale, use_tauscale, treef_name_, save_trees, silent_mode));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_treesample_module();

static const R_CallMethodDef CallEntries[] = {
    {"_tsbcf_do_rgig1", (DL_FUNC) &_tsbcf_do_rgig1, 3},
    {"_tsbcf_gig_norm", (DL_FUNC) &_tsbcf_gig_norm, 3},
    {"_tsbcf_checkFit", (DL_FUNC) &_tsbcf_checkFit, 6},
    {"_tsbcf_dmixnorm0", (DL_FUNC) &_tsbcf_dmixnorm0, 4},
    {"_tsbcf_pmixnorm0", (DL_FUNC) &_tsbcf_pmixnorm0, 4},
    {"_tsbcf_dmixnorm", (DL_FUNC) &_tsbcf_dmixnorm, 4},
    {"_tsbcf_pmixnorm", (DL_FUNC) &_tsbcf_pmixnorm, 4},
    {"_tsbcf_dmixnorm0_post", (DL_FUNC) &_tsbcf_dmixnorm0_post, 4},
    {"_tsbcf_pmixnorm0_post", (DL_FUNC) &_tsbcf_pmixnorm0_post, 4},
    {"_tsbcf_dmixnorm_post", (DL_FUNC) &_tsbcf_dmixnorm_post, 4},
    {"_tsbcf_pmixnorm_post", (DL_FUNC) &_tsbcf_pmixnorm_post, 4},
    {"_tsbcf_rpgmix", (DL_FUNC) &_tsbcf_rpgmix, 3},
    {"_tsbcf_tsbcfFit", (DL_FUNC) &_tsbcf_tsbcfFit, 33},
    {"_tsbcf_tsbcfProbit", (DL_FUNC) &_tsbcf_tsbcfProbit, 34},
    {"_rcpp_module_boot_treesample_module", (DL_FUNC) &_rcpp_module_boot_treesample_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsbcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
